#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef FCSDKIOS_SWIFT_H
#define FCSDKIOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FCSDKiOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Available AudioDevices
typedef SWIFT_ENUM(NSInteger, ACBAudioDevice, open) {
/// speaker phone enabled
  ACBAudioDeviceSpeakerphone = 0,
/// wired headset enabled
  ACBAudioDeviceWiredHeadset = 1,
/// earpiece enabled
  ACBAudioDeviceEarpiece = 2,
/// bluetooth enabled
  ACBAudioDeviceBluetooth = 3,
/// no audio device
  ACBAudioDeviceNone = 4,
};

@class AVAudioSession;

/// <code>ACBAudioDeviceManager</code> is intended for applications to be able to interact with the AVSession in FCSDK
SWIFT_CLASS("_TtC8FCSDKiOS21ACBAudioDeviceManager")
@interface ACBAudioDeviceManager : NSObject
/// Initialize the manager with the SDKâ€™s <code>Logger</code>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This method will start  the <code>AVAudioSession</code> singleton and set some default values
- (void)start;
/// Stops the <code>AVAudioSession</code>
- (void)stop;
/// Available Audio Input Routes
///
/// returns:
/// Any array of Available inputs
- (NSArray<NSObject *> * _Nullable)audioDevices SWIFT_WARN_UNUSED_RESULT;
/// Sets the default audio device from the <code>ACBAudioDevice</code>
/// \param device Takes a parameter of <code>AVAudioSession</code>
///
- (void)setDefaultAudio:(enum ACBAudioDevice)device;
/// Sets the audio device from the <code>ACBAudioDevice</code>
/// \param device Takes a parameter of <code>AVAudioSession</code>
///
- (void)setAudioDevice:(enum ACBAudioDevice)device;
/// This method is intended to referesh the speakerPhone setting if it is needed
- (void)refreshSpeakerphoneSetting;
/// This method tells WebRTC that we want to use manual Audio
+ (void)useManualAudioForCallKit;
/// This method activates the <em>CallKit</em>  Audio Session and passes it up to <em>WebRTC</em>. This method must be called on
/// <em>func provider(_ provider: CXProvider, didActivate audioSession: AVAudioSession)</em>
/// \param audioSession Our Audio Session from the <em>CallKit</em> provider delegate
///
+ (void)activeCallKitAudioSession:(AVAudioSession * _Nonnull)audioSession;
/// This method deactivates the <em>CallKit</em> Audio Session and passes it up to <em>WebRTC</em>. This method must be called on
/// <em>provider(_ provider: CXProvider, didDeactivate audioSession: AVAudioSession)</em>
/// \param audioSession Our Audio Session from the <em>CallKit</em> provider delegate
///
+ (void)deactiveCallKitAudioSession:(AVAudioSession * _Nonnull)audioSession;
@end

@class NSString;
@protocol ACBTopicDelegate;
@class ACBTopic;

/// This class represents the interface for creating AED Objects
SWIFT_CLASS("_TtC8FCSDKiOS12ACBClientAED") SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBClientAED : NSObject
/// This method is what allows an <code>ACBTopic</code> to be created without an expiry time
/// \param topicName The name of a topic you would like to create
///
/// \param delegate The <code>ACBTopicDelegate</code>
///
///
/// returns:
/// The <code>ACBTopic</code> you created
- (ACBTopic * _Nullable)createTopicWithName:(NSString * _Nonnull)topicName delegate:(id <ACBTopicDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
/// This method is what allows an <code>ACBTopic</code> to be created
/// \param topicName The name of a topic you would like to create
///
/// \param expiryTime The lengh of time as in <code>Int</code>
///
/// \param delegate The <code>ACBTopicDelegate</code>
///
///
/// returns:
/// The <code>ACBTopic</code> you created
- (ACBTopic * _Nullable)createTopicWithName:(NSString * _Nonnull)topicName expiryTime:(NSInteger)expiryTime delegate:(id <ACBTopicDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;
@class AVPictureInPictureController;
@class AVCaptureSession;
@class UIImage;
enum VirtualBackgroundMode : NSInteger;
@protocol ACBClientCallDelegate;
enum ACBClientCallStatus : NSInteger;

/// <code>ACBClientCall</code> is the entry point for all call related methods in FCSDK. However this is limited to when incoming calls are made. For information on when outgoing calls are made please see <code>ACBClientPhone</code>.
SWIFT_CLASS("_TtC8FCSDKiOS13ACBClientCall") SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBClientCall : NSObject
/// Indicates whether or not the call has audio
@property (nonatomic, readonly) BOOL hasRemoteAudio;
/// The callâ€™s Identifier
@property (nonatomic, copy) NSString * _Nonnull callId;
/// The callâ€™s <code>UIView</code> used for displaying remote views
@property (nonatomic, strong) UIView * _Nullable remoteView;
/// The callâ€™s <code>UIView</code> used for displaying remote buffer views intended for use in picture in picture enabled applications
- (void)remoteBufferViewWithCompletionHandler:(void (^ _Nonnull)(UIView * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
- (void)setPipController:(AVPictureInPictureController * _Nonnull)controller completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
- (void)captureSessionWithCompletionHandler:(void (^ _Nonnull)(AVCaptureSession * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
- (void)localBufferViewWithCompletionHandler:(void (^ _Nonnull)(UIView * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
/// The client should always remove the <code>remoteBufferView()</code> when finished using the bufferView.
- (void)removeBufferViewWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
/// The client should always remove the <code>remoteBufferView()</code> when finished using the bufferView.
- (void)removeLocalBufferViewWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
- (void)feedBackgroundImage:(UIImage * _Nullable)image mode:(enum VirtualBackgroundMode)mode completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
- (void)removeBackgroundImageWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=15);
/// A boolean value used to tell FCSDK if the client should have remote video when creating the call
@property (nonatomic, readonly) BOOL hasRemoteVideo;
/// The remote address intended to call
@property (nonatomic, readonly, copy) NSString * _Nonnull remoteAddress;
/// The remote display name for the call
@property (nonatomic, readonly, copy) NSString * _Nonnull remoteDisplayName;
/// The calls delegate used to pass information intended for client useage
@property (nonatomic, weak) id <ACBClientCallDelegate> _Nullable delegate;
/// The status of our SDK. <code>ACBClientCallStatus</code>
@property (nonatomic, readonly) enum ACBClientCallStatus status;
/// Determines whether or not the SDK should enable Audio
/// \param isAudioEnabled A Boolean value to determine enabling
///
- (void)enableLocalAudio:(BOOL)isAudioEnabled;
/// Determines whether or not the SDK should enable Video.  if our <em>WebRTCHandler</em> has not been intialized yet we set the availabily and then call
/// <em>localVideoStreamEvent()</em> at a later point in time. The PeerConnection connection should only be nil if the call has not yet been established.
/// \param isVideoEnabled A Boolean value to determine enabling
///
- (void)enableLocalVideo:(BOOL)isVideoEnabled;
/// Sends a DTMF message (to the server) given a number (0-9), ABCD, *, # as input.
/// \param code The DTMF code in string format to be sent to the server
///
/// \param localPlayback A Boolean value to indicated whether or not the SDK should play the local DTMF Audio
///
- (void)playDTMFCode:(NSString * _Nonnull)code localPlayback:(BOOL)localPlayback;
/// This method ends the call entirely. If the call parameter is nil it will end the call associated with this current ACBClientCall object. However we may want to end a specific call which can be passed
/// in the parameter.
- (void)end;
/// This method ends the call entirely. If the call parameter is nil it will end the call associated with this current ACBClientCall object.
/// However we may want to end a specific call which can be passed  in the parameter.
/// When used in Objective-C a callback is available.
- (void)endWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBClientCall (SWIFT_EXTENSION(FCSDKiOS))
/// You can use this method to tell FCSDK to hold a call.
- (void)hold;
/// If your call is on <code>hold()</code> you may use this method to resume the call
- (void)resume;
@end


enum ACBMediaDirection : NSInteger;

SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBClientCall (SWIFT_EXTENSION(FCSDKiOS))
/// This is our method used to answer an incoming call. When a user calls our end point FCSDK will notify us of an incoming call, at that point we must answer the call with this method.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     audioDir: The Direction we want to answer with. Seeâ€¦ <code>ACBMediaDirection</code>
///   </li>
///   <li>
///     videoDir:  The Direction we want to answer with. Seeâ€¦ <code>ACBMediaDirection</code>
///   </li>
/// </ul>
- (void)answerWithAudio:(enum ACBMediaDirection)audioDir andVideo:(enum ACBMediaDirection)videoDir SWIFT_DEPRECATED_MSG("use answer(withAudio:) async instead");
/// This is our method used to answer an incoming call asynchronously. When a user calls our end point FCSDK will notify us of an incoming call, at that point we must answer the call with this method.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     audioDir: The Direction we want to answer with. Seeâ€¦ <code>ACBMediaDirection</code>
///   </li>
///   <li>
///     videoDir:  The Direction we want to answer with. Seeâ€¦ <code>ACBMediaDirection</code>
///   </li>
/// </ul>
- (void)answerWithAudio:(enum ACBMediaDirection)audioDir andVideo:(enum ACBMediaDirection)videoDir completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

enum ACBClientCallProvisionalResponse : NSInteger;

SWIFT_PROTOCOL("_TtP8FCSDKiOS21ACBClientCallDelegate_") SWIFT_AVAILABILITY(ios,introduced=13)
@protocol ACBClientCallDelegate <NSObject>
@optional
/// Here we can receive the media change request from the delegate
- (void)callDidReceiveMediaChangeRequest:(ACBClientCall * _Nonnull)call;
- (void)didReceiveMediaChangeRequest:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we can be notified of <code>ACBClientCallStatus</code> changes
- (void)call:(ACBClientCall * _Nonnull)call didChange:(enum ACBClientCallStatus)status;
- (void)didChange:(enum ACBClientCallStatus)status call:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we can be notified on call failure
- (void)call:(ACBClientCall * _Nonnull)call didReceiveCallFailureWithError:(NSError * _Nonnull)error;
- (void)didReceiveCallFailureWith:(NSError * _Nonnull)error call:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we receive the call failure notice
- (void)call:(ACBClientCall * _Nonnull)call didReceiveDialFailureWithError:(NSError * _Nonnull)error;
- (void)didReceiveDialFailureWith:(NSError * _Nonnull)error call:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we receive the session interruption notice
- (void)call:(ACBClientCall * _Nonnull)call didReceiveSessionInterruption:(NSString * _Nonnull)message;
- (void)didReceiveSessionInterruption:(NSString * _Nonnull)message call:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we receive the recording permission failure notice
- (void)call:(ACBClientCall * _Nullable)call didReceiveCallRecordingPermissionFailure:(NSString * _Nonnull)message;
- (void)didReceiveCallRecordingPermissionFailure:(NSString * _Nonnull)message call:(ACBClientCall * _Nullable)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we received the did change the remote display name notice
- (void)call:(ACBClientCall * _Nonnull)call didChangeRemoteDisplayName:(NSString * _Nonnull)name;
- (void)didChangeRemoteDisplayName:(NSString * _Nonnull)name with:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we are notfied when a call did add a local media stream
- (void)callDidAddLocalMediaStream:(ACBClientCall * _Nonnull)call;
- (void)didAddLocalMediaStream:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we are notfied when a call did add a remote media stream
- (void)callDidAddRemoteMediaStream:(ACBClientCall * _Nonnull)call;
- (void)didAddRemoteMediaStream:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we are notified when we will receive media change requests
- (void)callWillReceiveMediaChangeRequest:(ACBClientCall * _Nonnull)call;
- (void)willReceiveMediaChangeRequest:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we will receive a notification when the inbound call quality will change
- (void)call:(ACBClientCall * _Nonnull)call didReportInboundQualityChange:(NSInteger)inboundQuality;
- (void)didReportInboundQualityChange:(NSInteger)inboundQuality with:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we are notfied when receiving SSRCs
- (void)call:(ACBClientCall * _Nonnull)call didReceiveSSRCsForAudio:(NSArray<NSString *> * _Nonnull)audioSSRCs andVideo:(NSArray<NSString *> * _Nonnull)videoSSRCs;
- (void)didReceiveSSRCsFor:(NSArray<NSString *> * _Nonnull)audioSSRCs andVideo:(NSArray<NSString *> * _Nonnull)videoSSRCs call:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Here we are receive the provisional response
- (void)callWithCall:(ACBClientCall * _Nonnull)call didReceive:(enum ACBClientCallProvisionalResponse)responseStatus withReason:(NSString * _Nonnull)reason;
- (void)responseStatusWithDidReceive:(enum ACBClientCallProvisionalResponse)responseStatus withReason:(NSString * _Nonnull)reason call:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

typedef SWIFT_ENUM(NSInteger, ACBClientCallProvisionalResponse, open) {
/// Ignored
  ACBClientCallProvisionalResponseIgnored = 0,
/// Indicates a ringing event
  ACBClientCallProvisionalResponseRinging = 1,
/// Indicates call is being forwarded
  ACBClientCallProvisionalResponseBeingForwarded = 2,
/// Indicates call is queued
  ACBClientCallProvisionalResponseQueued = 3,
/// Indicates general call progress
  ACBClientCallProvisionalResponseSessionProgress = 4,
};

/// <code>ACBClientCallStatus</code> determines the call flow base of FCSDK calls.
typedef SWIFT_ENUM(NSInteger, ACBClientCallStatus, open) {
/// Indicates the call is in a process of being setup.
  ACBClientCallStatusSetup = 0,
/// Idicates we are ready to set up our buffer views *
  ACBClientCallStatusPreparingBufferViews = 1,
/// Indicates the call is ringing/alerting locally - incoming call.
  ACBClientCallStatusAlerting = 2,
/// Indicates the call is ringing on the remote side - outgoing call.
  ACBClientCallStatusRinging = 3,
/// Indicates the call is connected and weâ€™re waiting for media streams to establish.
  ACBClientCallStatusMediaPending = 4,
/// Indicates the call is in progress including media.
  ACBClientCallStatusInCall = 5,
/// Indicates the dialled operation timed out.
  ACBClientCallStatusTimedOut = 6,
/// Indicates the dialled number is busy.
  ACBClientCallStatusBusy = 7,
/// Indicates the dialled number was unreachable.
  ACBClientCallStatusNotFound = 8,
/// Indicates the call has errored.
  ACBClientCallStatusError = 9,
/// Indicates the call has ended.
  ACBClientCallStatusEnded = 10,
};

@protocol ACBClientPhoneDelegate;
enum ACBVideoCapture : NSInteger;
@class ACBVideoCaptureSetting;

/// <code>ACBClientPhone</code> is an object that does all of the phone related work. You can expecte inbound and outbound call flows to originate from this class.
/// It is important to note that <code>ACBClientPhone</code> is lazily initialize once per <code>ACBUC</code> registration.
SWIFT_CLASS("_TtC8FCSDKiOS14ACBClientPhone") SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBClientPhone : NSObject
/// If true, the preview view is mirrored when using a front-facing camera (see .setCamera()). Does not affect video sent to callee.
@property (nonatomic) BOOL mirrorFrontFacingCameraPreview;
/// An array of calls that are currently in progress.
@property (nonatomic, readonly, copy) NSArray<ACBClientCall *> * _Nonnull currentCalls;
/// The phone delegate.
@property (nonatomic, weak) id <ACBClientPhoneDelegate> _Nullable delegate;
/// Manages audio session
@property (nonatomic, readonly, strong) ACBAudioDeviceManager * _Nonnull audioDeviceManager;
/// The preferred capture resolution. If no preferred resolution is specified, the best SD resolution that the device is capable of will be chosen.
@property (nonatomic) enum ACBVideoCapture preferredCaptureResolution;
/// The preferred capture framerate. If no preferred frame rate is specified, the best frame rate that the device is capable of will be chosen.
@property (nonatomic) NSInteger preferredCaptureFrameRate;
/// This computed property is used to set the Appâ€™s preview view for video calls using <code>ACBView</code>.
@property (nonatomic, strong) UIView * _Nullable previewView;
/// This computed property is used to set the Appâ€™s remote view for video calls using <code>ACBView</code>.
@property (nonatomic, strong) UIView * _Nullable remoteView;
/// This method can be used to request permisions to use the microphone and camera.
/// \param audio A boolean to indicate whether or not to request audio permissions
///
/// \param video A boolean to indicate whether or not to request video permissions
///
+ (void)requestMicrophoneAndCameraPermission:(BOOL)audio video:(BOOL)video completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Sets the camera to be used based off the <code>ACBClientCall</code>â€™s camera.
/// \param camera Camera postion i.e (.front, .back).
///
- (void)setCamera:(AVCaptureDevicePosition)position;
/// Used to capture recommended settings
///
/// returns:
/// The device Infoâ€™s recommended capture settings
- (NSArray<ACBVideoCaptureSetting *> * _Nullable)recommendedCaptureSettings SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBClientPhone (SWIFT_EXTENSION(FCSDKiOS))
/// This method is the entry point in creating Outgoing FCSDK Calls. Call this method to start an FCSDK Outbound call.
/// \param remoteAddress The address in string format you want to call
///
/// \param audioDirection The <code>ACBMediaDirection</code> for the audio on the call
///
/// \param videoDirection The <code>ACBMediaDirection</code> for the video on the call
///
/// \param delegate The <code>ACBClientCallDelegate</code>
///
///
/// returns:
/// The <code>ACBClientCall</code>
- (ACBClientCall * _Nullable)createCallToAddress:(NSString * _Nonnull)remoteAddress withAudio:(enum ACBMediaDirection)audioDirection video:(enum ACBMediaDirection)videoDirection delegate:(id <ACBClientCallDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use createCall() async instead");
- (void)createCallToAddress:(NSString * _Nonnull)remoteAddress withAudio:(enum ACBMediaDirection)audioDirection video:(enum ACBMediaDirection)videoDirection delegate:(id <ACBClientCallDelegate> _Nullable)delegate completionHandler:(void (^ _Nonnull)(ACBClientCall * _Nullable))completionHandler;
@end



SWIFT_PROTOCOL("_TtP8FCSDKiOS22ACBClientPhoneDelegate_") SWIFT_AVAILABILITY(ios,introduced=13)
@protocol ACBClientPhoneDelegate <NSObject>
@optional
/// A notification to indicate an incoming call.
- (void)phone:(ACBClientPhone * _Nonnull)phone didReceive:(ACBClientCall * _Nonnull)call;
- (void)phone:(ACBClientPhone * _Nonnull)phone received:(ACBClientCall * _Nonnull)call completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// A notification that video is being captured at a specified resolution and frame-rate. Depending on the capabilities of the device, these settings may be different from the preferred resolution and framerate set on the phone.
- (void)phone:(ACBClientPhone * _Nonnull)phone didChangeSettings:(ACBVideoCaptureSetting * _Nonnull)settings forCamera:(AVCaptureDevicePosition)camera;
- (void)phone:(ACBClientPhone * _Nonnull)phone didChangeSettings:(ACBVideoCaptureSetting * _Nonnull)settings for:(AVCaptureDevicePosition)camera completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// The media direction that we determine. <em>i.e (.sendOnly or .sendAndReceive)</em>
typedef SWIFT_ENUM(NSInteger, ACBMediaDirection, open) {
/// no media direction
  ACBMediaDirectionNone = 0,
/// only sending media
  ACBMediaDirectionSendOnly = 1,
/// only receving media
  ACBMediaDirectionReceiveOnly = 2,
/// send and receive media
  ACBMediaDirectionSendAndReceive = 3,
};


/// This class is used for creating AED Topics
SWIFT_CLASS("_TtC8FCSDKiOS8ACBTopic") SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBTopic : NSObject
/// The delegate for publicly exposing AED Topic methods
@property (nonatomic, readonly, weak) id <ACBTopicDelegate> _Nullable delegate;
/// A name for this topic
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// A boolean to determine if we are connected to this topic
@property (nonatomic, readonly) BOOL connected;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBTopic (SWIFT_EXTENSION(FCSDKiOS))
/// This method will disconnect this object
- (void)disconnect;
/// This method will disconnect this object. It is the same call as <code>disconnect()</code>, but in Objective-C you can get a completion handler.
- (void)disconnectWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
/// This method will disconnect/delete the topic
/// \param deleteTopic A Boolean that determines to delete or not
///
- (void)disconnectWithDeleteFlag:(BOOL)deleteTopic;
/// This method will disconnect/delete the topic. In Objective-C you will get a callback on completion.
/// \param deleteTopic A Boolean that determines to delete or not.
///
- (void)disconnectWithDeleteFlag:(BOOL)deleteTopic completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// This method will create data for the currentTopic
/// \param key The Key for the object
///
/// \param value The Value for the object
///
- (void)submitDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// This method will create data for the currentTopic. In Objective-C you will get a callback on completion.
/// \param key The Key for the object
///
/// \param value The Value for the object
///
- (void)submitDataWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// This method will delete an data object with its key
/// \param key key for the object to delete
///
- (void)deleteDataWithKey:(NSString * _Nonnull)key;
/// This method will delete an data object with its key. In Objective-C you will get a callback on completion.
/// \param key key for the object to delete
///
- (void)deleteDataWithKey:(NSString * _Nonnull)key completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// This method will create an AED Message
/// \param aedMessage A message to send
///
- (void)sendAedMessage:(NSString * _Nonnull)aedMessage;
/// This method will create an AED Message. In Objective-C you will get a callback on completion.
/// \param aedMessage A message to send
///
- (void)sendAedMessage:(NSString * _Nonnull)aedMessage completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@class AedData;

SWIFT_PROTOCOL("_TtP8FCSDKiOS16ACBTopicDelegate_") SWIFT_AVAILABILITY(ios,introduced=13)
@protocol ACBTopicDelegate <NSObject>
/// Connects to a topic with a given data
- (void)topic:(ACBTopic * _Nonnull)topic didConnectWithData:(AedData * _Nonnull)data;
/// Delete a message from a topic
- (void)topic:(ACBTopic * _Nonnull)topic didDeleteWithMessage:(NSString * _Nonnull)message;
/// Topic to submit
- (void)topic:(ACBTopic * _Nonnull)topic didSubmitWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value version:(NSInteger)version;
/// Topic to delete
- (void)topic:(ACBTopic * _Nonnull)topic didDeleteDataSuccessfullyWithKey:(NSString * _Nonnull)key version:(NSInteger)version;
/// Gets the topic and then notifies the delegate with the message
- (void)topic:(ACBTopic * _Nonnull)topic didSendMessageSuccessfullyWithMessage:(NSString * _Nonnull)message;
/// Connection failed with message
- (void)topic:(ACBTopic * _Nonnull)topic didNotConnectWithMessage:(NSString * _Nonnull)message;
/// Did not delete with message
- (void)topic:(ACBTopic * _Nonnull)topic didNotDeleteWithMessage:(NSString * _Nonnull)message;
/// Did not submit key with message
- (void)topic:(ACBTopic * _Nonnull)topic didNotSubmitWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value message:(NSString * _Nonnull)message;
/// Did not delete data with message
- (void)topic:(ACBTopic * _Nonnull)topic didNotDeleteDataWithKey:(NSString * _Nonnull)key message:(NSString * _Nonnull)message;
/// Did not send message with origianl message
- (void)topic:(ACBTopic * _Nonnull)topic didNotSendMessage:(NSString * _Nonnull)originalMessage message:(NSString * _Nonnull)message;
/// A Topic to delete
- (void)topicDidDelete:(ACBTopic * _Nonnull)topic;
/// Did update key
- (void)topic:(ACBTopic * _Nonnull)topic didUpdateWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value version:(NSInteger)version deleted:(BOOL)deleted;
/// Did receive message
- (void)topic:(ACBTopic * _Nonnull)topic didReceiveMessage:(NSString * _Nonnull)message;
@end

@protocol ACBUCDelegate;
enum LoggingLevel : NSInteger;
@class ACBUCOptions;

/// <code>ACBUC</code> is the entry point of FCSDK. The application needs to access the API initially via a single object, <code>ACBUC</code>. To set up all the
/// functionality to which the user has access, the application needs to obtain a session ID from the RestAPI, and initialize the <code>ACBUC</code> object using
/// it. Once it has received the Session ID, the client application must call the <code>uc(withConfiguration:delegate:)</code> method on
/// the ACBUC. The delegate (in this case self) must implement the <code>ACBUCDelegate</code> protocol. Once the session has started, FCSDK will call the
/// delegate method <em>ACBUCDelegate.ucDidStartSession(_ uc:)</em>, and the application can make use of the ACBUC object. (If the session does not start,
/// FCSDK will call one of the delegateâ€™s error methods.)
SWIFT_CLASS("_TtC8FCSDKiOS5ACBUC") SWIFT_AVAILABILITY(ios,introduced=13)
@interface ACBUC : NSObject
/// This is the delegate used to interact with the methods related to <code>ACBUC</code>
@property (nonatomic, weak) id <ACBUCDelegate> _Nullable delegate;
/// This is the <code>ACBClientAED</code> Object
@property (nonatomic, readonly, strong) ACBClientAED * _Nonnull aed;
/// This property allows applications to use cookies
@property (nonatomic) BOOL useCookies;
/// This property gives the up to date websocket connection status
@property (nonatomic) BOOL connection;
/// This method is used to override the LoggingSystem and writes the logs to a file for Debugging. <em>We want to only initialize the LoggingSystem Bootstrap once</em>
+ (void)logToFile:(enum LoggingLevel)logLevel;
/// The static method to initialize the <code>ACBUC</code> object
/// \param withConfiguration The Configuration string
///
/// \param delegate The <code>ACBUCDelegate</code>
///
///
/// returns:
/// The <code>ACBUC</code> Object
+ (ACBUC * _Nonnull)ucWithConfiguration:(NSString * _Nonnull)withConfiguration delegate:(id <ACBUCDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Will be removed in future versions of FCSDKiOS, use the Async version instead.");
/// The static method to initialize the <code>ACBUC</code> object
/// \param withConfiguration The Configuration string
///
/// \param delegate The <code>ACBUCDelegate</code>
///
///
/// returns:
/// The <code>ACBUC</code> Object
+ (void)ucWithConfiguration:(NSString * _Nonnull)withConfiguration delegate:(id <ACBUCDelegate> _Nullable)delegate completionHandler:(void (^ _Nonnull)(ACBUC * _Nonnull))completionHandler;
/// The static method to initialize the <code>ACBUC</code> object
/// \param withConfiguration The Configuration string
///
/// \param stunServers An array of Stun Servers
///
/// \param delegate The <code>ACBUCDelegate</code>
///
///
/// returns:
/// The <code>ACBUC</code> Object
+ (void)ucWithConfiguration:(NSString * _Nonnull)withConfiguration stunServers:(NSArray<NSString *> * _Nonnull)stunServers delegate:(id <ACBUCDelegate> _Nullable)delegate completionHandler:(void (^ _Nonnull)(ACBUC * _Nonnull))completionHandler;
/// The static method to initialize the <code>ACBUC</code> object
/// \param withConfiguration The Configuration string
///
/// \param stunServers An array of Stun Servers
///
/// \param delegate The <code>ACBUCDelegate</code>
///
/// \param options Additional <code>ACBUCOptions</code>
///
///
/// returns:
/// The <code>ACBUC</code> Object
+ (void)ucWithConfiguration:(NSString * _Nonnull)withConfiguration stunServers:(NSArray<NSString *> * _Nonnull)stunServers delegate:(id <ACBUCDelegate> _Nullable)delegate options:(ACBUCOptions * _Nonnull)options completionHandler:(void (^ _Nonnull)(ACBUC * _Nonnull))completionHandler;
@property (nonatomic, strong) ACBClientPhone * _Nonnull phone;
/// Starts the call session async without a callback
- (void)startSession;
/// Starts the a call session. A callback is available on completion in Objective-C
- (void)startSessionWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Stops a server session
- (void)stopSession;
/// Stops a server session.  A callback is available on completion in Objective-C
- (void)stopSessionWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Use this method to notify FCSDK that the application has a network connection
/// \param networkSatisfied A boolean value determining whether or not the application has a network connection
///
- (void)setNetworkReachable:(BOOL)networkSatisfied;
/// Use this method to notify FCSDK that the application has a network connection.  A callback is available on completion in Objective-C
/// \param networkSatisfied A boolean value determining whether or not the application has a network connection
///
- (void)setNetworkReachable:(BOOL)networkSatisfied completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// This method tells FCSDK the rule determined to allow any certificate
/// \param accept A boolean value determining whether or not the server accepts any certificate
///
- (void)acceptAnyCertificate:(BOOL)accept;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The delegate for the ACBUC instance. The delegate deals with session establishment notifications and high-level error scenarios.
SWIFT_PROTOCOL("_TtP8FCSDKiOS13ACBUCDelegate_") SWIFT_AVAILABILITY(ios,introduced=13)
@protocol ACBUCDelegate <NSObject>
@optional
/// A notification to indicate that the session has been initialised successfully.
/// - Parameters:
/// - uc: uc The UC.
- (void)ucDidStartSession:(ACBUC * _Nonnull)uc;
- (void)didStartSession:(ACBUC * _Nonnull)uc completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// A notification to indicate that initialisation of the session failed.
/// - Parameters:
/// - uc: uc The UC.
- (void)ucDidFailToStartSession:(ACBUC * _Nonnull)uc;
- (void)didFailToStartSession:(ACBUC * _Nonnull)uc completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// A notification to indicate that the server has experienced a system failure.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     uc: uc The UC.
///   </li>
/// </ul>
- (void)ucDidReceiveSystemFailure:(ACBUC * _Nonnull)uc;
- (void)didReceiveSystemFailure:(ACBUC * _Nonnull)uc completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// A notification to indicate that there are problems with the network connection, the session
/// has been lost, and all reconnection attempts have failed. See <code>uc(uc: ACBUC?, willRetryConnectionNumber attemptNumber: Int, in delay: TimerInterval)</code>
/// for details.
/// The app should log in again and re-establish a new session, or direct the user to do so.
/// - Parameters:
/// - uc: uc The UC.
- (void)ucDidLoseConnection:(ACBUC * _Nonnull)uc;
- (void)didLoseConnection:(ACBUC * _Nonnull)uc completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// A notification to indicate that there are problems with the network connection and that an attempt
/// will be made to re-establish the session.
/// In the event of connection problems, several attempts to reconnect will be made, and each attempt will
/// be preceded by this notification. If after all of these attempts the session still cannot
/// be re-established, the delegate will receive the <code>ucDidLoseConnection(_:)</code> callback and the attempts
/// will stop. If one of the retries is successful then the delegate will receive the
/// <code>ucDidReestablishConnection(_:)</code> callback.
/// The delegate can decide to stop this retry process at any point by calling <code>stopSession()</code>.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     attemptNumber: - 1 indicates the first reconnection attempt, 2 the second attempt, etc.
///   </li>
///   <li>
///     delay: - the next reconnection attempt will be made after this delay.
///   </li>
/// </ul>
- (void)uc:(ACBUC * _Nonnull)uc willRetryConnectionNumber:(NSInteger)attemptNumber in:(NSTimeInterval)delay;
- (void)uc:(ACBUC * _Nonnull)uc willRetryConnection:(NSInteger)attemptNumber in:(NSTimeInterval)delay completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// A notification to indicate that a reconnection attempt has succeeded.
/// See <code>uc(uc: ACBUC?, willRetryConnectionNumber attemptNumber: Int, in delay: TimerInterval)</code> for details.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     uc: uc The UC.
///   </li>
/// </ul>
- (void)ucDidReestablishConnection:(ACBUC * _Nonnull)uc;
- (void)didReestablishConnection:(ACBUC * _Nonnull)uc completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end


/// Advanced options that can be specified when creating the ACBUC object (see
/// <code>uc(withConfiguration:stunServers:delegate:options:)</code>). Most applications will not need to use these options, and
/// should use one of the other <code>uc(withConfiguration...)</code> functions instead.
SWIFT_CLASS("_TtC8FCSDKiOS12ACBUCOptions")
@interface ACBUCOptions : NSObject
/// Equivalent to not specifying any options.
+ (ACBUCOptions * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
/// Specifying this option replaces the iOS system echo cancellation (provided by the Voice Processing Audio Unit)
/// with an alternative software-based echo cancellation algorithm. Most applications will find the default
/// behaviour to provide the best performance, but this option may be worth experimenting with in case of echo
/// problems.
+ (ACBUCOptions * _Nonnull)useSoftwareEchoCancellation SWIFT_WARN_UNUSED_RESULT;
/// Specifying this option disables iOS system voice processing (provided by the Voice Processing Audio Unit)
/// and does not use any form of echo cancellation. Note that ACBUCOptionUseSoftwareEchoCancellation has no effect
/// if ACBUCOptionNoVoiceProcessing is specified.
+ (ACBUCOptions * _Nonnull)noVoiceProcessing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithOptions:(NSArray<ACBUCOptions *> * _Nonnull)options;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

/// Available Resolutions
typedef SWIFT_ENUM(NSInteger, ACBVideoCapture, open) {
/// automatic resolution best for the device
  ACBVideoCaptureResolutionAuto = 0,
/// 352px by 288px
  ACBVideoCaptureResolution352x288 = 1,
/// 640px by 480px
  ACBVideoCaptureResolution640x480 = 2,
/// 1280px by 720px
  ACBVideoCaptureResolution1280x720 = 3,
};


/// This class is used to set the Video Capture Settings, such as <code>resolution</code> and <code>frameRate</code>.
SWIFT_CLASS("_TtC8FCSDKiOS22ACBVideoCaptureSetting")
@interface ACBVideoCaptureSetting : NSObject
/// The resolution to be set. See <code>ACBVideoCapture</code>
@property (nonatomic, readonly) enum ACBVideoCapture resolution;
/// An interger value to set as the frameRate
@property (nonatomic, readonly) NSInteger frameRate;
/// We want to return the size for our capture resolution from our available resolutions
/// \param resolution The <code>RawValue</code> of a <code>ACBVideoCapture</code>â€™s resolution
///
///
/// returns:
/// <code>CGSize</code>
+ (CGSize)sizeForVideoCaptureResolutionWithResolution:(NSString * _Nonnull)resolution SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class TopicData;
@class NSNumber;

/// Properties are optional for encoding and decoding puposes as defined by FCSDK
/// We also need to be a class because Objective-C doesnâ€™t play well with `Structs``
SWIFT_CLASS("_TtC8FCSDKiOS7AedData")
@interface AedData : NSObject
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<TopicData *> * _Nullable topicData;
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic, strong) NSNumber * _Nullable _timeout;
- (nonnull instancetype)initWithType:(NSString * _Nullable)type name:(NSString * _Nullable)name topicData:(NSArray<TopicData *> * _Nullable)topicData message:(NSString * _Nullable)message _timeout:(NSNumber * _Nullable)_timeout;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Constants
SWIFT_CLASS("_TtC8FCSDKiOS9Constants")
@interface Constants : NSObject
/// The Version of the SDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SDK_VERSION_NUMBER;)
+ (NSString * _Nonnull)SDK_VERSION_NUMBER SWIFT_WARN_UNUSED_RESULT;
/// The time in seconds to wait for the websocket to open
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) float WEBSOCKET_CONNECTION_TIMEOUT;)
+ (float)WEBSOCKET_CONNECTION_TIMEOUT SWIFT_WARN_UNUSED_RESULT;
+ (void)setWEBSOCKET_CONNECTION_TIMEOUT:(float)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LoggingLevel, open) {
  LoggingLevelTrace = 0,
  LoggingLevelDebug = 1,
  LoggingLevelInfo = 2,
  LoggingLevelNotice = 3,
  LoggingLevelWarning = 4,
  LoggingLevelError = 5,
  LoggingLevelCritical = 6,
};






/// Properties are optional for encoding and decoding puposes as defined by FCSDK
/// We also need to be a class because Objective-C doesnâ€™t play well with `Structs``
SWIFT_CLASS("_TtC8FCSDKiOS9TopicData")
@interface TopicData : NSObject
@property (nonatomic, copy) NSString * _Nullable key;
@property (nonatomic, copy) NSString * _Nullable value;
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface UIImage (SWIFT_EXTENSION(FCSDKiOS))
@property (nonatomic, copy) NSString * _Nonnull title;
@end


/// The acceptable modes for Virtual Backgrounds
typedef SWIFT_ENUM(NSInteger, VirtualBackgroundMode, open) {
  VirtualBackgroundModeBlur = 0,
  VirtualBackgroundModeImage = 1,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
